<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".css" #>
<#@ assembly name="$(SolutionDir)libs\dotless.core.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="dotless.Core" #>
<#@ import namespace="dotless.Core.configuration" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#


var _useCssExtension = false;
var _minify = false;

var currentDirectory = Path.GetDirectoryName(Host.TemplateFile);
var filespec = _useCssExtension ? "*.less.css" : "*.less";
var cssFiles = Directory.GetFiles(currentDirectory, filespec);

var configuration = new DotlessConfiguration();
configuration.MinifyOutput = _minify;
foreach(string cssFile in cssFiles) 
{
        Write("/* " + Path.GetFileName(cssFile) + "  */\n");
        string css = Less.Parse(File.ReadAllText(cssFile), configuration);
        Write(css);
        Write("\n");
}

//MarkDirty();
#>

<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#+

/*
    This MarkDirty code is based on T4MVC by David Ebbo. Concept explained here: http://blogs.msdn.com/davidebb/archive/2009/06/26/the-mvc-t4-template-is-now-up-on-codeplex-and-it-does-change-your-code-a-bit.aspx
*/
void MarkDirty() {
    // Get the DTE service from the host
    var serviceProvider = Host as IServiceProvider;
	EnvDTE.DTE dte;
    if (serviceProvider == null)
        return;

	dte = serviceProvider.GetService(typeof(SDTE)) as DTE;

    // Find the .tt file's ProjectItem
    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    // If the .tt file is not opened, open it
    if (projectItem.Document == null)
        projectItem.Open(Constants.vsViewKindCode);

    // Mark the .tt file as unsaved. This way it will be saved and update itself next time the
    // project is built. Basically, it keeps marking itself as unsaved to make the next build work.
    // Note: this is certainly hacky, but is the best I could come up with so far.
    projectItem.Document.Saved = false;
}

#>