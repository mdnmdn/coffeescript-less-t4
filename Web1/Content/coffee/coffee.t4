<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".js" #>
<#@ assembly name="$(SolutionDir)libs\CoffeeSharp.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="CoffeeSharp" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#

//var minify= true;

var inputs = new String[] {
// write here the list of file to process
    "one.js",
    "two.coffee",
    "two.js",
    "*.coffee",
    "three.js",
    "*.js"
};

var excludes = new String[] {
// write here the list of file to process
    "coffee1.js"
};

List<string> fileRegistry = new List<string>(); 

var currentDirectory = Path.GetDirectoryName(Host.TemplateFile);

// inclusions
foreach(var input in inputs){
    var files = Directory.GetFiles(currentDirectory, input);
        
    foreach(var file in files){
        if (!fileRegistry.Contains(file)){
            fileRegistry.Add(file);
        } 
    }
}

// exclusion 
foreach(var input in excludes){
    var files = Directory.GetFiles(currentDirectory, input);
    foreach(var file in files){
        if (fileRegistry.Contains(file)){
            fileRegistry.Remove(file);
        } 
    }
}


var engine = new CoffeeSharp.CoffeeScriptEngine();
foreach(string file in fileRegistry) 
{
        Write("/* " + Path.GetFileName(file) + "  */\n");
        var contents = File.ReadAllText(file);
        if (file.EndsWith("coffee")) contents = engine.Compile(contents);
        Write(contents);
        Write("\n");
}

//MarkDirty();

#>

<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>

<#+

/*
    This MarkDirty code is based on T4MVC by David Ebbo. Concept explained here: http://blogs.msdn.com/davidebb/archive/2009/06/26/the-mvc-t4-template-is-now-up-on-codeplex-and-it-does-change-your-code-a-bit.aspx
*/
void MarkDirty() {
    // Get the DTE service from the host
    var serviceProvider = Host as IServiceProvider;
	EnvDTE.DTE dte;
    if (serviceProvider == null)
        return;

	dte = serviceProvider.GetService(typeof(SDTE)) as DTE;

    // Find the .tt file's ProjectItem
    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    // If the .tt file is not opened, open it
    if (projectItem.Document == null)
        projectItem.Open(Constants.vsViewKindCode);

    // Mark the .tt file as unsaved. This way it will be saved and update itself next time the
    // project is built. Basically, it keeps marking itself as unsaved to make the next build work.
    // Note: this is certainly hacky, but is the best I could come up with so far.
    projectItem.Document.Saved = false;
}

#>